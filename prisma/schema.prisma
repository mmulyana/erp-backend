generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  email      String        @unique
  password   String
  created_at DateTime      @default(now()) @db.Date()
  updated_at DateTime      @default(now()) @db.Date()
  activities ActivityLog[]
  roles      UserRole[]

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("userRoles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@map("rolePermissions")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  groupId     Int
  group       PermissionGroup  @relation(fields: [groupId], references: [id])
  roles       RolePermission[]

  @@map("permissions")
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  permissions Permission[]

  @@map("permissionGroups")
}

// HRIS Module
model Employee {
  id                 Int                   @id @default(autoincrement())
  fullname           String                @db.VarChar(50)
  nickname           String?               @db.VarChar(50)
  hireDate           DateTime?             @db.Date
  salary_per_month   Decimal?              @db.Decimal(10, 2)
  salary_per_day     Decimal?              @db.Decimal(10, 2)
  salary_per_hour    Decimal?              @db.Decimal(10, 2)
  status             EmployeeStatus        @default(active)
  place_of_birth     String?
  birthdate          String?
  gender             Gender?
  marital_status     MaritalStatus?
  nik                String?
  kk                 String?
  religion           String?
  positionId         Int?
  position           Position?             @relation(fields: [positionId], references: [id])
  attendances        Attendance[]
  cashAdvances       CashAdvance[]
  leaves             Leave[]
  contact            Contact[]
  address            Address[]
  statusTracks       EmployeeStatusTrack[]
  employeeCompetency EmployeeCompetency[]
}

model EmployeeCompetency {
  id              Int           @id @default(autoincrement())
  employeeId      Int
  competencyId    Int
  certificationId Int
  employee        Employee      @relation(fields: [employeeId], references: [id])
  competency      Competency    @relation(fields: [competencyId], references: [id])
  certification   Certification @relation(fields: [certificationId], references: [id])
}

model Competency {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  EmployeeCompetency EmployeeCompetency[]
}

model Certification {
  id                  Int                  @id @default(autoincrement())
  name                String               @db.VarChar(100)
  issuingOrganization String               @db.VarChar(100)
  issueDate           DateTime             @db.Date
  expiryDate          DateTime             @db.Date
  EmployeeCompetency  EmployeeCompetency[]
}

model Contact {
  id         Int         @id @default(autoincrement())
  type       ContactType @default(phoneNumber)
  value      String
  employeeId Int
  isPrimary  Boolean     @default(false)
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

model Address {
  id         Int         @id @default(autoincrement())
  type       AddressType @default(domicile)
  rt         String?
  rw         String?
  kampung    String?
  desa       String?
  kecamatan  String?
  kebupaten  String?
  provinsi   String?
  kodePos    Int?
  employeeId Int
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

model Position {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?
  employees   Employee[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime @db.Date
  timeIn     String
  timeOut    String
  period     Int
  isOnLeave  Boolean? @default(false)
  leave      Leave?   @relation(fields: [leaveId], references: [id])
  leaveId    Int?
}

model CashAdvance {
  id           Int      @id @default(autoincrement())
  employee     Employee @relation(fields: [employeeId], references: [id])
  employeeId   Int
  amount       Decimal  @db.Decimal(10, 2)
  requestDate  DateTime @db.Date
  approvalDate DateTime @db.Date
  status       Status
}

model Leave {
  id          Int          @id @default(autoincrement())
  employee    Employee     @relation(fields: [employeeId], references: [id])
  employeeId  Int
  startDate   DateTime     @db.Date
  endDate     DateTime     @db.Date
  leaveType   LeaveType
  status      Status       @default(pending)
  attendances Attendance[]
}

// Activity Features
model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String
  module      String
  description String
  timestamp   DateTime @default(now())
}

model EmployeeStatusTrack {
  id         Int            @id @default(autoincrement())
  date       DateTime
  status     EmployeeStatus
  employeeId Int
  employee   Employee       @relation(fields: [employeeId], references: [id])
}

enum EmployeeStatus {
  active
  nonactive
}

enum Status {
  pending
  approved
  rejected
}

enum LeaveType {
  vacation
  sick
  personal
  maternity
  paternity
}

enum ContactType {
  email
  phoneNumber
  socialMedia
}

enum AddressType {
  domicile
  origin
  alternative
}

enum Gender {
  male
  female
}

enum MaritalStatus {
  single
  married
  divorced
  widowed
}
