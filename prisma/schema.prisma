generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  email             String              @unique
  password          String
  created_at        DateTime            @default(now()) @db.Date()
  updated_at        DateTime            @default(now()) @db.Date()
  log               ActivityLog[]
  roles             UserRole[]
  activities        Activity[]
  ProjectAttachment ProjectAttachment[]
  employeeId        Int?                @unique
  employee          Employee?           @relation(fields: [employeeId], references: [id])
  ActivityLike      ActivityLike[]
  TransactionGoods  TransactionGoods[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  groupId     Int
  group       PermissionGroup  @relation(fields: [groupId], references: [id])
  roles       RolePermission[]
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  permissions Permission[]
}

// HRIS Module
model Employee {
  id                    Int                   @id @default(autoincrement())
  fullname              String                @db.VarChar(50)
  status                Boolean?              @default(true)
  photo                 String?
  joined_at             String?
  joined_type           JoinedType?           @default(date)
  basic_salary          Decimal?              @db.Decimal(10, 2)
  overtime_salary       Decimal?              @db.Decimal(10, 2)
  pay_type              PayType?              @default(daily)
  employment_type       EmploymentType?       @default(permanent)
  place_of_birth        String?
  birth_date            String?
  gender                Gender?
  marital_status        MaritalStatus?
  religion              String?
  last_education        String?
  email                 String?
  isHidden              Boolean?              @default(false)
  positionId            Int?
  safety_induction_date DateTime?
  position              Position?             @relation(fields: [positionId], references: [id])
  attendances           Attendance[]
  cashAdvances          CashAdvance[]
  phoneNumbers          PhoneNumbers[]
  addresses             Address[]
  statusTracks          EmployeeStatusTrack[]
  competencies          EmployeeCompetency[]
  certifications        Certification[]
  overtime              Overtime[]
  EmployeeAssigned      EmployeeAssigned[]
  Project               Project[]
  user                  User?
}

enum JoinedType {
  date
  year
}

enum PayType {
  daily
  monthly
}

enum EmploymentType {
  permanent
  contract
  partime
}

enum Gender {
  male
  female
}

enum MaritalStatus {
  single
  married
  divorced
}

model EmployeeCompetency {
  id           Int        @id @default(autoincrement())
  employeeId   Int
  competencyId Int
  employee     Employee   @relation(fields: [employeeId], references: [id])
  competency   Competency @relation(fields: [competencyId], references: [id])
}

model Competency {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  color              String?
  EmployeeCompetency EmployeeCompetency[]
  Certification      Certification[]
}

model Certification {
  id                   Int         @id @default(autoincrement())
  certif_name          String
  certif_file          String?
  issuing_organization String?
  issue_year           String?     @db.VarChar(10)
  issue_month          String?     @db.VarChar(10)
  expiry_year          String?     @db.VarChar(10)
  expiry_month         String?     @db.VarChar(10)
  expire_at            DateTime?
  employeeId           Int
  competencyId         Int?
  competency           Competency? @relation(fields: [competencyId], references: [id])
  employee             Employee    @relation(fields: [employeeId], references: [id])
}

model PhoneNumbers {
  id         Int      @id @default(autoincrement())
  value      String
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Address {
  id         Int         @id @default(autoincrement())
  type       AddressType @default(domicile)
  value      String
  employeeId Int
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

enum AddressType {
  domicile
  origin
  alternative
}

enum Status {
  active
  inactive
}

model Position {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  color       String?
  description String?
  employees   Employee[]
}

model Attendance {
  id         Int            @id @default(autoincrement())
  employee   Employee       @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime
  total_hour Int
  type       AttendanceType @default(presence)
}

enum AttendanceType {
  presence
  absent
}

model Overtime {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  date        DateTime
  total_hour  Int
  description String?
}

model CashAdvance {
  id          Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  Int
  amount      Decimal  @db.Decimal(10, 2)
  requestDate DateTime @db.Date
  description String?
}

// Activity Features
model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String
  module      String
  description String
  timestamp   DateTime @default(now())
}

model EmployeeStatusTrack {
  id          Int      @id @default(autoincrement())
  date        DateTime
  status      Boolean
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  description String?
}

model BoardContainer {
  id       String       @id
  name     String
  color    String
  position Int
  items    BoardItems[]
}

model BoardItems {
  id          String         @id
  position    Int
  containerId String
  container   BoardContainer @relation(fields: [containerId], references: [id])
  project     Project?
}

model Project {
  id               Int                 @id @default(autoincrement())
  name             String
  progress         Int                 @default(0)
  payment_status   Int                 @default(0)
  description      String?
  date_created     DateTime            @default(now())
  date_started     DateTime?
  date_ended       DateTime?
  isArchive        Boolean?            @default(false)
  net_value        Decimal?            @db.Decimal(10, 2)
  leadId           Int?
  clientId         Int?
  boardItemsId     String              @unique
  lead             Employee?           @relation(fields: [leadId], references: [id])
  client           Client?             @relation(fields: [clientId], references: [id])
  boardItems       BoardItems          @relation(fields: [boardItemsId], references: [id])
  employees        EmployeeAssigned[]
  labels           ProjectHasLabel[]
  activities       Activity[]
  TransactionGoods TransactionGoods[]
  attachments      ProjectAttachment[]
  ProjectEstimate  ProjectEstimate[]
}

model ProjectAttachment {
  id          Int       @id @default(autoincrement())
  file        String
  name        String
  type        String?
  uploaded_by Int?
  projectId   Int
  isSecret    Boolean?  @default(false)
  uploaded_at DateTime? @default(now())
  user        User?     @relation(fields: [uploaded_by], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])
}

model ProjectEstimate {
  id        Int      @id @default(autoincrement())
  name      String
  price     Decimal? @db.Decimal(10, 2)
  qty       Int?
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Activity {
  id             Int                  @id @default(autoincrement())
  userId         Int?
  user           User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  name           String?
  comment        String
  projectId      Int
  replyId        Int?
  project        Project              @relation(fields: [projectId], references: [id], onDelete: NoAction)
  attachments    ActivityAttachment[]
  replies        Activity[]           @relation("ActivityReplies")
  parentActivity Activity?            @relation("ActivityReplies", fields: [replyId], references: [id], onDelete: NoAction)
  created_at     DateTime             @default(now())
  updated_at     DateTime?
  likes          ActivityLike[]
}

model ActivityLike {
  id         Int      @id @default(autoincrement())
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())

  @@unique([activityId, userId])
}

model ActivityAttachment {
  id         Int      @id @default(autoincrement())
  attachment String
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id])
}

model ProjectHasLabel {
  id        Int          @id @default(autoincrement())
  projectId Int
  labelId   Int
  project   Project      @relation(fields: [projectId], references: [id])
  label     ProjectLabel @relation(fields: [labelId], references: [id])
}

model EmployeeAssigned {
  id         Int      @id @default(autoincrement())
  projectId  Int
  employeeId Int
  project    Project  @relation(fields: [projectId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model ProjectLabel {
  id       Int               @id @default(autoincrement())
  name     String
  color    String
  projects ProjectHasLabel[]
}

model Client {
  id        Int            @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  position  String?
  companyId Int?
  company   CompanyClient? @relation(fields: [companyId], references: [id])
  Project   Project[]
}

model CompanyClient {
  id      Int      @id @default(autoincrement())
  name    String
  address String?
  phone   String?
  email   String?
  logo    String?
  users   Client[]
}

// MODULE INVENTORY
model Goods {
  id            Int      @id @default(autoincrement())
  name          String
  qty           Int
  available     Int
  minimum       Int      @default(1)
  photoUrl      String?
  locationId    Int?
  measurementId Int?
  categoryId    Int?
  brandId       Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_deleted    Boolean  @default(false)

  location        Location?          @relation(fields: [locationId], references: [id])
  measurement     Measurements?      @relation(fields: [measurementId], references: [id])
  brand           Brand?             @relation(fields: [brandId], references: [id])
  category        goodsCategory?     @relation(fields: [categoryId], references: [id])
  transactions    TransactionGoods[]
  stock_histories StockHistory[]

  @@index([locationId])
  @@index([categoryId])
  @@index([brandId])
  @@index([available])
}

model StockHistory {
  id               Int      @id @default(autoincrement())
  transactionId    Int      @unique
  goodsId          Int
  qty_before       Int
  available_before Int
  created_at       DateTime @default(now())

  transaction TransactionGoods @relation(fields: [transactionId], references: [id])
  good        Goods            @relation(fields: [goodsId], references: [id])

  @@index([goodsId, created_at])
}

model TransactionGoods {
  id          Int             @id @default(autoincrement())
  goodsId     Int
  qty         Int
  price       Decimal?
  supplierId  Int?
  date        DateTime
  type        TransactionType
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  projectId   Int?
  is_returned Boolean?        @default(false)

  project       Project?      @relation(fields: [projectId], references: [id])
  good          Goods         @relation(fields: [goodsId], references: [id])
  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  stock_history StockHistory?
  User          User?         @relation(fields: [userId], references: [id])
  userId        Int?

  @@index([goodsId, date])
  @@index([supplierId])
}

enum TransactionType {
  in
  out
  opname
  borrowed
}

model Location {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Measurements {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Brand {
  id       Int     @id @default(autoincrement())
  name     String
  photoUrl String?
  goods    Goods[]
}

model goodsCategory {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Supplier {
  id          Int                @id @default(autoincrement())
  name        String
  phone       String?
  email       String?
  address     String?
  photoUrl    String?
  tags        SupplierToTag[]
  transaction TransactionGoods[]
  employees   SupplierEmployee[]
}

model SupplierEmployee {
  id         Int      @id @default(autoincrement())
  name       String
  position   String?
  phone      String?
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

model SupplierTag {
  id       Int             @id @default(autoincrement())
  name     String
  color    String
  supplier SupplierToTag[]
}

model SupplierToTag {
  id         Int         @id @default(autoincrement())
  supplierId Int
  tagId      Int
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  tag        SupplierTag @relation(fields: [tagId], references: [id])
}
