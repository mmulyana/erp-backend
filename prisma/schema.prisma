generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id         String  @id @default(uuid()) @db.Uuid()
  roleId     String? @db.Uuid()
  username   String  @unique @db.VarChar(50)
  phone      String? @unique @db.VarChar(13)
  email      String? @unique @db.VarChar(255)
  active     Boolean @default(true)
  photoUrl   String? @db.VarChar(100)
  password   String  @db.VarChar(255)
  employeeId String? @unique @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  attachments  ProjectAttachment[]
  reports      ProjectReport[]
  cashAdvances CashAdvance[]
  attendances  Attendance[]
  stockLedger  StockLedger[]
  loans        Loan[]
  inventories  Inventory[]
  overtimes    Overtime[]
  projects     Project[]

  role     Role?      @relation(fields: [roleId], references: [id], onDelete: SetNull)
  employee Employee?  @relation(fields: [employeeId], references: [id])
  payrolls Payroll[]
  StockIn  StockIn[]
  StockOut StockOut[]

  @@map("users")
}

model Role {
  id          String  @id @default(uuid()) @db.Uuid()
  name        String
  description String?
  permissions String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users User[]

  @@map("roles")
}

// HRIS
model Employee {
  id                  String    @id @default(uuid()) @db.Uuid()
  fullname            String    @db.VarChar(50)
  position            String?   @db.VarChar(50)
  photoUrl            String?   @db.VarChar(100)
  birthDate           DateTime?
  joinedAt            DateTime?
  active              Boolean?  @default(true)
  phone               String?
  lastEducation       String?
  salary              Int?
  overtimeSalary      Int?
  safetyInductionDate DateTime?
  status              Boolean?  @default(true)
  address             String?   @db.Text()
  payType             PayType?  @default(daily)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  assignedEmployee AssignedEmployee[]
  certificates     Certificate[]
  cashAdvances     CashAdvance[]
  attendances      Attendance[]
  overtimes        Overtime[]
  user             User?
  payrolls         Payroll[]

  @@map("employees")
}

enum PayType {
  monthly
  daily
}

model Certificate {
  id         String    @id @default(uuid()) @db.Uuid()
  employeeId String    @db.Uuid()
  name       String
  fileUrl    String?
  publisher  String?
  issueDate  DateTime?
  expiryDate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("certificates")
}

model Attendance {
  id         String         @id @default(uuid()) @db.Uuid()
  employeeId String         @db.Uuid()
  createdBy  String         @db.Uuid()
  date       DateTime
  type       AttendanceType @default(presence)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])

  @@map("attendances")
}

enum AttendanceType {
  presence
  absent
}

model Overtime {
  id         String   @id @default(uuid()) @db.Uuid()
  employeeId String   @db.Uuid()
  createdBy  String   @db.Uuid()
  totalHour  Int
  note       String?  @db.VarChar(255)
  date       DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])

  @@map("overtimes")
}

model CashAdvance {
  id         String            @id @default(uuid())
  employeeId String            @db.Uuid()
  createdBy  String            @db.Uuid()
  amount     Int               @db.Integer()
  date       DateTime
  note       String?           @db.VarChar(255)
  status     CashAdvanceStatus @default(notYetPaidOff)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])

  @@map("cash_advances")
}

enum CashAdvanceStatus {
  paidOff
  notYetPaidOff
}

model CashAdvanceTransaction {
  id            String   @id @default(uuid()) @db.Uuid()
  cashAdvanceId String   @db.Uuid()
  amount        Int
  remaining     Int?
  date          DateTime
  note          String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("cash_advance_transactions")
}

model PayrollPeriod {
  id            String       @id @default(uuid()) @db.Uuid()
  name          String
  startDate     DateTime
  endDate       DateTime
  totalSpending Int          @default(0)
  status        PeriodStatus @default(processing)
  payType       PayType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("payroll_periods")
}

model Payroll {
  id              String        @id @default(uuid()) @db.Uuid()
  payrollPeriodId String        @db.Uuid()
  employeeId      String        @db.Uuid()
  workDays        Int
  overtimeHours   Int
  cashAdvance     Int
  salary          Int
  overtimeSalary  Int
  status          PayrollStatus @default(draft)
  createdBy       String        @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User     @relation(fields: [createdBy], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  payrollDeductions PayrollDeduction[]

  @@map("payrolls")
}

model PayrollDeduction {
  id        String @id @default(uuid()) @db.Uuid
  payrollId String @db.Uuid
  name      String @db.VarChar(100)
  amount    Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  payroll Payroll @relation(fields: [payrollId], references: [id])

  @@map("payroll_deductions")
}

enum PeriodStatus {
  processing
  done
}

enum PayrollStatus {
  draft
  done
}

// Project
// model BoardContainer {
//   id       String @id
//   name     String @unique
//   color    String
//   position Int

//   items BoardItems[]
// }

// model BoardItems {
//   id          String   @id
//   position    Int
//   containerId String
//   project     Project?

//   container BoardContainer @relation(fields: [containerId], references: [id])
// }

model Project {
  id                 String        @id @default(uuid()) @db.Uuid()
  leadId             String?       @db.Uuid()
  clientId           String?       @db.Uuid()
  name               String        @db.VarChar(255)
  description        String?       @db.VarChar(255)
  progressPercentage Int           @default(0)
  paymentPercentage  Int           @default(0)
  netValue           BigInt?
  startedAt          DateTime?
  endedAt            DateTime?
  archivedAt         DateTime?
  status             ProjectStatus @default(NOT_STARTED)
  // boardItemsId       String    @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  attachments ProjectAttachment[]
  employees   AssignedEmployee[]
  reports     ProjectReport[]
  loans       Loan[]

  client   Client?    @relation(fields: [clientId], references: [id])
  // boardItems BoardItems @relation(fields: [boardItemsId], references: [id])
  lead     User?      @relation(fields: [leadId], references: [id])
  StockOut StockOut[]
}

enum ProjectStatus {
  NOT_STARTED
  OFFERING
  DOING
  BILLING
  DONE
}

model AssignedEmployee {
  id         String    @id @default(uuid()) @db.Uuid()
  employeeId String    @db.Uuid()
  projectId  String    @db.Uuid()
  startDate  DateTime?
  endDate    DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  project  Project  @relation(fields: [projectId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
}

model ProjectAttachment {
  id        String  @id @default(uuid()) @db.Uuid()
  projectId String  @db.Uuid()
  createdBy String  @db.Uuid()
  fileUrl   String
  type      String  @db.VarChar(50)
  secret    Boolean @default(false)
  name      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user    User    @relation(fields: [createdBy], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model ProjectReport {
  id        String    @id @default(uuid()) @db.Uuid()
  projectId String    @db.Uuid()
  createdBy String?   @db.Uuid()
  message   String    @db.VarChar(255)
  date      DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: NoAction)
  user    User?   @relation(fields: [createdBy], references: [id])

  attachments ReportAttachment[]
}

model ReportAttachment {
  id       String @id @default(uuid()) @db.Uuid()
  reportId String @db.Uuid()
  photoUrl String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  report ProjectReport @relation(fields: [reportId], references: [id])
}

model Client {
  id        String  @id @default(uuid()) @db.Uuid()
  companyId String? @db.Uuid()
  name      String
  email     String?
  phone     String?
  position  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  project Project[]

  company CompanyClient? @relation(fields: [companyId], references: [id])
}

model CompanyClient {
  id       String  @id @default(uuid()) @db.Uuid()
  name     String
  email    String?
  phone    String?
  address  String? @db.Text()
  photoUrl String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employees Client[]
}

// Inventory
model Inventory {
  id                String  @id @default(uuid()) @db.Uuid()
  locationId        String? @db.Uuid()
  brandId           String? @db.Uuid()
  createdBy         String? @db.Uuid()
  name              String  @db.VarChar(50)
  minimum           Int     @default(1)
  description       String? @db.VarChar(255)
  unitOfMeasurement String? @db.VarChar(50)
  photoUrl          String? @db.VarChar(100)
  availableStock    Int     @default(0)
  totalStock        Int     @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  location LocationInventory? @relation(fields: [locationId], references: [id])
  brand    BrandInventory?    @relation(fields: [brandId], references: [id])
  user     User?              @relation(fields: [createdBy], references: [id])

  loans         Loan[]
  stockLedgers  StockLedger[]
  stockInItems  StockInItem[]
  stockOutItems StockOutItem[]
}

model StockLedger {
  id          String          @id @default(uuid()) @db.Uuid()
  inventoryId String          @db.Uuid()
  refType     RefType
  referenceId String          @db.Uuid()
  createdBy   String          @db.Uuid()
  type        TransactionType
  quantity    Int
  note        String?         @db.VarChar(255)
  date        DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user      User?     @relation(fields: [createdBy], references: [id])
  inventory Inventory @relation(fields: [inventoryId], references: [id])
  Loan      Loan?     @relation(fields: [loanId], references: [id])
  loanId    String?

  @@map("stock_ledgers")
}

enum RefType {
  STOCK_IN
  STOCK_OUT
  LOAN
}

enum TransactionType {
  IN
  OUT
  LOAN
  RETURNED
}

model StockIn {
  id              String   @id @default(uuid()) @db.Uuid()
  referenceNumber String?
  supplierId      String?  @db.Uuid()
  note            String?
  createdBy       String?  @db.Uuid()
  date            DateTime
  photoUrl        String?  @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplier Supplier?     @relation(fields: [supplierId], references: [id])
  user     User?         @relation(fields: [createdBy], references: [id])
  items    StockInItem[]

  @@map("stock_in")
}

model StockInItem {
  id         String @id @default(uuid()) @db.Uuid()
  stockInId  String @db.Uuid()
  itemId     String @db.Uuid()
  quantity   Int
  unitPrice  Int
  totalPrice Int

  stockIn StockIn   @relation(fields: [stockInId], references: [id])
  item    Inventory @relation(fields: [itemId], references: [id])

  @@map("stock_in_items")
}

model StockOut {
  id        String   @id @default(uuid()) @db.Uuid()
  note      String?
  createdBy String?  @db.Uuid()
  date      DateTime
  projectId String?  @db.Uuid()
  photoUrl  String?  @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [createdBy], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  items StockOutItem[]

  @@map("stock_out")
}

model StockOutItem {
  id         String @id @default(uuid())
  stockOutId String @db.Uuid()
  itemId     String @db.Uuid()
  quantity   Int
  unitPrice  Int?
  totalPrice Int?

  stockOut StockOut  @relation(fields: [stockOutId], references: [id])
  item     Inventory @relation(fields: [itemId], references: [id])

  @@map("stock_out_items")
}

model Loan {
  id               String     @id @default(uuid())
  itemId           String     @db.Uuid()
  borrowerId       String     @db.Uuid()
  quantityBorrowed Int
  quantityReturned Int        @default(0)
  loanDate         DateTime
  returnDate       DateTime?
  note             String?
  status           LoanStatus @default(LOANED)
  PhotoUrlOut      String?
  PhotoUrlIn       String?

  item     Inventory @relation(fields: [itemId], references: [id])
  borrower User      @relation(fields: [borrowerId], references: [id])

  stockLedgers StockLedger[]
  Project      Project?      @relation(fields: [projectId], references: [id])
  projectId    String?       @db.Uuid()

  @@map("loans")
}

enum LoanStatus {
  LOANED
  PARTIAL_RETURNED
  RETURNED
}

model Supplier {
  id           String  @id @default(uuid()) @db.Uuid()
  name         String  @db.VarChar(50)
  address      String? @db.Text()
  photoUrl     String? @db.VarChar(100)
  email        String? @db.VarChar(100)
  phone        String? @db.VarChar(100)
  googleMapUrl String? @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  stockIn StockIn[]

  @@map("suppliers")
}

model LocationInventory {
  id   String @id @default(uuid()) @db.Uuid()
  name String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  inventories Inventory[]

  @@map("inventory_warehouses")
}

model BrandInventory {
  id       String  @id @default(uuid()) @db.Uuid()
  name     String  @db.VarChar(50)
  photoUrl String? @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  inventories Inventory[]

  @@map("inventory_brands")
}
