generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  email       String        @unique
  password    String
  created_at  DateTime      @default(now()) @db.Date()
  updated_at  DateTime      @default(now()) @db.Date()
  role        Roles?        @relation(fields: [rolesId], references: [id])
  rolesId     Int?
  ActivityLog ActivityLog[]

  @@map("users")
}

model Roles {
  id          Int               @id @default(autoincrement())
  name        String
  permissions RolesPermission[]
  User        User[]

  @@map("roles")
}

model RolesPermission {
  id           Int        @id @default(autoincrement())
  enabled      Boolean    @default(false)
  roles        Roles      @relation(fields: [rolesId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  rolesId      Int

  @@map("roles_permission")
}

model Permission {
  id               Int               @id @default(autoincrement())
  name             String
  roles_permission RolesPermission[]
  groupId          Int
  group            PermissionGroup   @relation(fields: [groupId], references: [id])

  @@map("permissions")
}

model PermissionGroup {
  id          Int          @id @unique @default(autoincrement())
  name        String
  description String?
  permissions Permission[]

  @@map("permission_group")
}

// HRIS Module
model Employee {
  id           Int           @id @default(autoincrement())
  firstName    String        @db.VarChar(50)
  lastName     String?       @db.VarChar(50)
  nickname     String?       @db.VarChar(50)
  email        String?       @db.VarChar(100)
  address      String        @db.VarChar(100)
  phone        String?       @db.VarChar(20)
  hireDate     DateTime      @map("hire_date") @db.Date
  jobTitle     String        @map("job_title") @db.VarChar(100)
  salary       Decimal       @db.Decimal(10, 2)
  department   Department    @relation(fields: [departmentId], references: [id])
  departmentId Int           @map("department_id")
  attendances  Attendance[]
  competencies Competency[]
  cashAdvances CashAdvance[]
  leaves       Leave[]
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId Int       @map("employee_id")
  date       DateTime  @db.Date
  timeIn     DateTime? @map("time_in") @db.Time
  timeOut    DateTime? @map("time_out") @db.Time
  isOnLeave  Boolean   @map("is_on_leave")
  leave      Leave?    @relation(fields: [leaveId], references: [id])
  leaveId    Int?      @map("leave_id")
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  employees Employee[]
}

model Competency {
  id              Int           @id @default(autoincrement())
  employee        Employee      @relation(fields: [employeeId], references: [id])
  employeeId      Int           @map("employee_id")
  name            String        @db.VarChar(100)
  certification   Certification @relation(fields: [certificationId], references: [id])
  certificationId Int           @map("certification_id")
}

model Certification {
  id                  Int          @id @default(autoincrement())
  name                String       @db.VarChar(100)
  issuingOrganization String       @map("issuing_organization") @db.VarChar(100)
  issueDate           DateTime     @map("issue_date") @db.Date
  expiryDate          DateTime     @map("expiry_date") @db.Date
  competencies        Competency[]
}

model CashAdvance {
  id           Int      @id @default(autoincrement())
  employee     Employee @relation(fields: [employeeId], references: [id])
  employeeId   Int      @map("employee_id")
  amount       Decimal  @db.Decimal(10, 2)
  requestDate  DateTime @map("request_date") @db.Date
  approvalDate DateTime @map("approval_date") @db.Date
  status       Status
}

model Leave {
  id          Int          @id @default(autoincrement())
  employee    Employee     @relation(fields: [employeeId], references: [id])
  employeeId  Int          @map("employee_id")
  startDate   DateTime     @map("start_date") @db.Date
  endDate     DateTime     @map("end_date") @db.Date
  leaveType   LeaveType    @map("leave_type")
  status      Status
  attendances Attendance[]
}

// Activity Features
model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String
  module      String
  description String
  timestamp   DateTime @default(now())
}

enum Status {
  pending
  approved
  rejected
}

enum LeaveType {
  vacation
  sick
  personal
  maternity
  paternity
}
