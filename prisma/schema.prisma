generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id       String  @id @default(uuid()) @db.Uuid()
  roleId   String? @db.Uuid()
  username String  @unique @db.VarChar(50)
  phone    String? @unique @db.VarChar(13)
  email    String? @unique @db.VarChar(255)
  active   Boolean @default(true)
  photoUrl String? @db.VarChar(100)
  password String  @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  attachments  ProjectAttachment[]
  reports      ProjectReport[]
  cashAdvances CashAdvance[]
  attendances  Attendance[]
  stockLedger  StockLedger[]
  stockLoans   StockLoan[]
  inventories  Inventory[]
  overtimes    Overtime[]
  projects     Project[]
  tours        Tour[]

  role Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)
}

model Role {
  id          String  @id @default(uuid()) @db.Uuid()
  name        String
  description String?
  permissions String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users User[]
}

// HRIS
model Employee {
  id                  String    @id @default(uuid()) @db.Uuid()
  fullname            String    @db.VarChar(50)
  position            String?   @db.VarChar(50)
  photoUrl            String?   @db.VarChar(100)
  birthDate           DateTime?
  joinedAt            DateTime?
  active              Boolean?  @default(true)
  phone               String?
  lastEducation       String?
  salary              Int?
  overtimeSalary      Int?
  safetyInductionDate DateTime?
  status              Boolean?  @default(true)
  address             String?   @db.Text()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  assignedEmployee AssignedEmployee[]
  certificates     Certificate[]
  cashAdvances     CashAdvance[]
  attendances      Attendance[]
  overtimes        Overtime[]
}

model Certificate {
  id         String    @id @default(uuid()) @db.Uuid()
  employeeId String    @db.Uuid()
  name       String
  fileUrl    String?
  publisher  String?
  issueDate  DateTime?
  expiryDate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id         String         @id @default(uuid()) @db.Uuid()
  employeeId String         @db.Uuid()
  createdBy  String         @db.Uuid()
  date       DateTime
  type       AttendanceType @default(presence)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])
}

enum AttendanceType {
  presence
  absent
}

model Overtime {
  id         String   @id @default(uuid()) @db.Uuid()
  employeeId String   @db.Uuid()
  createdBy  String   @db.Uuid()
  totalHour  Int
  note       String?  @db.VarChar(255)
  date       DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])
}

model CashAdvance {
  id         String   @id @default(uuid())
  employeeId String   @db.Uuid()
  createdBy  String   @db.Uuid()
  amount     Int      @db.Integer()
  date       DateTime
  note       String?  @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])
}

// Project
model BoardContainer {
  id       String @id
  name     String @unique
  color    String
  position Int

  items BoardItems[]
}

model BoardItems {
  id          String   @id
  position    Int
  containerId String
  project     Project?

  container BoardContainer @relation(fields: [containerId], references: [id])
}

model Project {
  id                 String    @id @default(uuid()) @db.Uuid()
  leadId             String?   @db.Uuid()
  clientId           String?   @db.Uuid()
  name               String    @db.VarChar(255)
  description        String?   @db.VarChar(255)
  progressPercentage Int       @default(0)
  paymentPercentage  Int       @default(0)
  netValue           BigInt?
  startedAt          DateTime?
  endedAt            DateTime?
  archivedAt         DateTime?
  boardItemsId       String    @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  attachments ProjectAttachment[]
  employees   AssignedEmployee[]
  reports     ProjectReport[]
  stockLoans  StockLoan[]

  client     Client?    @relation(fields: [clientId], references: [id])
  boardItems BoardItems @relation(fields: [boardItemsId], references: [id])
  lead       User?      @relation(fields: [leadId], references: [id])
}

model AssignedEmployee {
  id         String    @id @default(uuid()) @db.Uuid()
  employeeId String    @db.Uuid()
  projectId  String    @db.Uuid()
  startDate  DateTime?
  endDate    DateTime?

  project  Project  @relation(fields: [projectId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
}

model ProjectAttachment {
  id        String  @id @default(uuid()) @db.Uuid()
  projectId String  @db.Uuid()
  createdBy String  @db.Uuid()
  fileUrl   String  @db.VarChar(255)
  fileType  String  @db.VarChar(10)
  secret    Boolean @default(false)
  name      String  @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user    User    @relation(fields: [createdBy], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model ProjectReport {
  id        String    @id @default(uuid()) @db.Uuid()
  projectId String    @db.Uuid()
  createdBy String?   @db.Uuid()
  message   String    @db.VarChar(255)
  date      DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: NoAction)
  user    User?   @relation(fields: [createdBy], references: [id])

  attachments ReportAttachment[]
}

model ReportAttachment {
  id       String @id @default(uuid()) @db.Uuid()
  reportId String @db.Uuid()
  photoUrl String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  report ProjectReport @relation(fields: [reportId], references: [id])
}

model Client {
  id        String  @id @default(uuid()) @db.Uuid()
  companyId String? @db.Uuid()
  name      String
  email     String?
  phone     String?
  position  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  project Project[]

  company CompanyClient? @relation(fields: [companyId], references: [id])
}

model CompanyClient {
  id       String  @id @default(uuid()) @db.Uuid()
  name     String
  email    String?
  phone    String?
  address  String? @db.Text()
  photoUrl String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  employees Client[]
}

// Inventory
model Inventory {
  id                String  @id @default(uuid()) @db.Uuid()
  locationId        String? @db.Uuid()
  brandId           String? @db.Uuid()
  createdBy         String? @db.Uuid()
  name              String  @db.VarChar(50)
  minimum           Int     @default(1)
  description       String? @db.VarChar(255)
  unitOfMeasurement String? @db.VarChar(50)
  photoUrl          String? @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  location LocationInventory? @relation(fields: [locationId], references: [id])
  brand    BrandInventory?    @relation(fields: [brandId], references: [id])
  user     User?              @relation(fields: [createdBy], references: [id])

  stockLoans  StockLoan[]
  StockLedger StockLedger[]
}

model StockLoan {
  id             String   @id @default(uuid()) @db.Uuid()
  projectId      String   @db.Uuid()
  inventoryId    String   @db.Uuid()
  createdBy      String   @db.Uuid()
  quantity       Int
  resultQuantity Int
  requestDate    DateTime
  returnDate     DateTime
  photoUrl       String   @db.VarChar(100)
  returnPhotoUrl String   @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  project   Project   @relation(fields: [projectId], references: [id])
  inventory Inventory @relation(fields: [inventoryId], references: [id])
  user      User      @relation(fields: [createdBy], references: [id])
}

model StockLedger {
  id             String          @id @default(uuid()) @db.Uuid()
  inventoryId    String          @db.Uuid()
  referenceId    String          @db.Uuid()
  createdBy      String          @db.Uuid()
  type           TransactionType
  quantity       Int
  resultQuantity Int
  note           String?         @db.VarChar(255)
  date           DateTime
  photoUrl       String?         @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User      User?     @relation(fields: [createdBy], references: [id])
  inventory Inventory @relation(fields: [inventoryId], references: [id])

  @@index([inventoryId, date])
}

enum TransactionType {
  stockIn
  stockOut
}

model StockIn {
  id         String @id @db.Uuid()
  supplierId String @db.Uuid()
  price      Int

  supplier Supplier @relation(fields: [supplierId], references: [id])
}

model StockOut {
  id    String @id @db.Uuid()
  price Int
}

model Supplier {
  id           String  @id @default(uuid()) @db.Uuid()
  name         String  @db.VarChar(50)
  address      String? @db.Text()
  photoUrl     String? @db.VarChar(100)
  email        String? @db.VarChar(100)
  phone        String? @db.VarChar(100)
  googleMapUrl String? @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  stockIn StockIn[]
}

model LocationInventory {
  id   String @id @default(uuid()) @db.Uuid()
  name String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  inventories Inventory[]
}

model BrandInventory {
  id       String  @id @default(uuid()) @db.Uuid()
  name     String  @db.VarChar(50)
  photoUrl String? @db.VarChar(100)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  inventories Inventory[]
}

model Tour {
  id     Int    @id @default(autoincrement())
  key    String
  userId String @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])
}
