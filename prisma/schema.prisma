generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  email      String        @unique
  password   String
  created_at DateTime      @default(now()) @db.Date()
  updated_at DateTime      @default(now()) @db.Date()
  activities ActivityLog[]
  roles      UserRole[]

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("userRoles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@map("rolePermissions")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  groupId     Int
  group       PermissionGroup  @relation(fields: [groupId], references: [id])
  roles       RolePermission[]

  @@map("permissions")
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  permissions Permission[]

  @@map("permissionGroups")
}

// HRIS Module
model Employee {
  id                 Int                   @id @default(autoincrement())
  photo              String?
  fullname           String                @db.VarChar(50)
  hireDate           DateTime?             @db.Date
  salary_per_month   Decimal?              @db.Decimal(10, 2)
  salary_per_day     Decimal?              @db.Decimal(10, 2)
  salary_per_hour    Decimal?              @db.Decimal(10, 2)
  status             EmployeeStatus        @default(active)
  place_of_birth     String?
  birthdate          String?
  gender             Gender?
  marital_status     MaritalStatus?
  nik                String?
  kk                 String?
  religion           String?
  positionId         Int?
  position           Position?             @relation(fields: [positionId], references: [id])
  attendances        Attendance[]
  cashAdvances       CashAdvance[]
  leaves             Leave[]
  contact            Contact[]
  address            Address[]
  statusTracks       EmployeeStatusTrack[]
  employeeCompetency EmployeeCompetency[]
  certifications     Certification[]
  overtime           Overtime[]
  EmployeeAssigned   EmployeeAssigned[]
  comments           ProjectComment[]
}

model EmployeeCompetency {
  id           Int        @id @default(autoincrement())
  employeeId   Int
  competencyId Int
  employee     Employee   @relation(fields: [employeeId], references: [id])
  competency   Competency @relation(fields: [competencyId], references: [id])
}

model Competency {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  EmployeeCompetency EmployeeCompetency[]
  Certification      Certification[]
}

model Certification {
  id                  Int         @id @default(autoincrement())
  name                String      @db.VarChar(100)
  issuingOrganization String      @db.VarChar(100)
  issueDate           DateTime    @db.Date
  expiryDate          DateTime    @db.Date
  employeeId          Int
  competencyId        Int?
  competency          Competency? @relation(fields: [competencyId], references: [id])
  employee            Employee    @relation(fields: [employeeId], references: [id])
}

model Contact {
  id         Int         @id @default(autoincrement())
  type       ContactType @default(phoneNumber)
  value      String
  employeeId Int
  isPrimary  Boolean     @default(false)
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

model Address {
  id         Int         @id @default(autoincrement())
  type       AddressType @default(domicile)
  rt         String?
  rw         String?
  kampung    String?
  desa       String?
  kecamatan  String?
  kebupaten  String?
  provinsi   String?
  kodePos    Int?
  employeeId Int
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

model Position {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?
  employees   Employee[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime @db.DateTime()
  total_hour Int
  type       String
  leaveId    Int?
  leave      Leave?   @relation(fields: [leaveId], references: [id])
}

model Overtime {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  date        DateTime @db.DateTime()
  total_hour  Int
  description String?
}

model CashAdvance {
  id          Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  Int
  amount      Decimal  @db.Decimal(10, 2)
  requestDate DateTime @db.Date
  description String?
}

model Leave {
  id          Int          @id @default(autoincrement())
  employee    Employee     @relation(fields: [employeeId], references: [id])
  employeeId  Int
  startDate   DateTime     @db.Date
  endDate     DateTime     @db.Date
  leaveType   String
  description String?
  attendances Attendance[]
}

// Activity Features
model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String
  module      String
  description String
  timestamp   DateTime @default(now())
}

model EmployeeStatusTrack {
  id         Int            @id @default(autoincrement())
  date       DateTime
  status     EmployeeStatus
  employeeId Int
  employee   Employee       @relation(fields: [employeeId], references: [id])
}

model BoardContainer {
  id       String       @id
  name     String
  color    String
  position Int
  items    BoardItems[]
}

model BoardItems {
  id          String         @id
  position    Int
  containerId String
  container   BoardContainer @relation(fields: [containerId], references: [id])
  project     Project?
}

model Project {
  id           Int                @id @default(autoincrement())
  name         String
  startDate    DateTime?
  budget       Decimal?           @db.Decimal(10, 2)
  priority     Priority           @default(low)
  labels       ProjectHasLabel[]
  employees    EmployeeAssigned[]
  boardItemsId String             @unique
  clientId     Int?
  client       Client?            @relation(fields: [clientId], references: [id])
  boardItems   BoardItems         @relation(fields: [boardItemsId], references: [id])
  comments     ProjectComment[]
}

model ProjectComment {
  id          Int                        @id @default(autoincrement())
  employeeId  Int
  comment     String
  projectId   Int
  project     Project                    @relation(fields: [projectId], references: [id], onDelete: NoAction)
  employee    Employee                   @relation(fields: [employeeId], references: [id])
  attachments ProjectCommentAttachment[]
}

model ProjectCommentAttachment {
  id         Int            @id @default(autoincrement())
  attachment String
  commentId  Int
  comment    ProjectComment @relation(fields: [commentId], references: [id])
}

model ProjectHasLabel {
  id        Int          @id @default(autoincrement())
  projectId Int
  labelId   Int
  project   Project      @relation(fields: [projectId], references: [id])
  label     ProjectLabel @relation(fields: [labelId], references: [id])
}

model EmployeeAssigned {
  id         Int      @id @default(autoincrement())
  projectId  Int
  employeeId Int
  isPic      Boolean  @default(false)
  project    Project  @relation(fields: [projectId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model ProjectLabel {
  id       Int               @id @default(autoincrement())
  name     String
  color    String
  projects ProjectHasLabel[]
}

model Client {
  id        Int            @id @default(autoincrement())
  name      String
  companyId Int?
  company   CompanyClient? @relation(fields: [companyId], references: [id])
  Project   Project[]
}

model CompanyClient {
  id    Int      @id @default(autoincrement())
  name  String
  logo  String?
  users Client[]
}

// MODULE INVENTORY
model Goods {
  id            Int                @id @default(autoincrement())
  name          String
  qty           Int
  total_price   Decimal
  photoUrl      String?
  locationId    Int
  measurementId Int
  categoryId    Int
  brandId       Int
  location      Location           @relation(fields: [locationId], references: [id])
  measurement   Measurements       @relation(fields: [measurementId], references: [id])
  brand         Brand              @relation(fields: [brandId], references: [id])
  category      goodsCategory      @relation(fields: [categoryId], references: [id])
  labels        GoodsToLabels[]
  transaction   TransactionGoods[]
}

model Location {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Measurements {
  id               Int                @id @default(autoincrement())
  name             String
  goods            Goods[]
  TransactionGoods TransactionGoods[]
}

model GoodsToLabels {
  id           Int        @id @default(autoincrement())
  goodsId      Int
  goodsLabelId Int
  goods        Goods      @relation(fields: [goodsId], references: [id])
  goodCategory GoodsLabel @relation(fields: [goodsLabelId], references: [id])
}

model GoodsLabel {
  id              Int             @id @default(autoincrement())
  name            String
  color           String
  goodsToCategory GoodsToLabels[]
}

model Brand {
  id          Int                @id @default(autoincrement())
  name        String
  photoUrl    String?
  goods       Goods[]
  transaction TransactionGoods[]
}

model Supplier {
  id          Int                @id @default(autoincrement())
  name        String
  phone       String?
  address     String?
  status      StatusSupplier     @default(active)
  photoUrl    String?
  tags        SupplierToTag[]
  transaction TransactionGoods[]
}

model SupplierEmployee {
  id       Int            @id @default(autoincrement())
  name     String
  position String?
  phone    String
  status   StatusSupplier @default(active)
}

model SupplierTag {
  id       Int             @id @default(autoincrement())
  name     String
  color    String
  supplier SupplierToTag[]
}

model SupplierToTag {
  id         Int         @id @default(autoincrement())
  supplierId Int
  tagId      Int
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  tag        SupplierTag @relation(fields: [tagId], references: [id])
}

model goodsCategory {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model TransactionGoods {
  id             Int           @id @default(autoincrement())
  goodsId        Int
  brandId        Int
  qty            Int
  price          Decimal
  photoUrl       String?
  supplierId     Int
  date           DateTime
  good           Goods         @relation(fields: [goodsId], references: [id])
  brand          Brand         @relation(fields: [brandId], references: [id])
  Measurements   Measurements? @relation(fields: [measurementsId], references: [id])
  measurementsId Int?
  supplier       Supplier      @relation(fields: [supplierId], references: [id])
}

enum Priority {
  urgent
  high
  medium
  low
}

enum EmployeeStatus {
  active
  nonactive
}

enum Status {
  pending
  approved
  rejected
}

enum StatusSupplier {
  active
  nonactive
}

enum LeaveType {
  vacation
  sick
  personal
  maternity
  paternity
}

enum ContactType {
  email
  phoneNumber
  socialMedia
}

enum AddressType {
  domicile
  origin
  alternative
}

enum Gender {
  male
  female
}

enum MaritalStatus {
  single
  married
  divorced
  widowed
}
