generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id           String              @id @default(uuid()) @db.Uuid()
  roleId       String?             @db.Uuid()
  username     String              @unique @db.VarChar(50)
  phone        String?             @unique @db.VarChar(13)
  email        String?             @unique @db.VarChar(255)
  active       Boolean             @default(true)
  photoUrl     String?             @db.VarChar(100)
  password     String              @db.VarChar(255)
  createdAt    DateTime            @default(now()) @db.Date()
  updatedAt    DateTime            @updatedAt
  deletedAt    DateTime?

  attachments  ProjectAttachment[]
  transactions TransactionGoods[]
  likes        ActivityLike[]
  activities   Activity[]
  tours        Tour[]
  helpdesk     Helpdesk[]
  projects     Project[]
  attendances  Attendance[]
  overtimes    Overtime[]
  cashAdvances CashAdvance[]

  role        Role?         @relation(fields: [roleId], references: [id], onDelete:SetNull)
}

model Role {
  id             String           @id @default(uuid()) @db.Uuid()
  name           String           
  description    String?
  createdAt      DateTime         @default(now()) @db.Date()
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  permissionRole PermissionRole[]
  users          User[]
}

model PermissionRole {
  id           String @id @default(uuid()) @db.Uuid()
  roleId       String @db.Uuid()
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [key])
}

model Permission {
  key            String           @id @unique
  name           String
  description    String?
  groupId        Int?
  permissionRole PermissionRole[]
  createdAt      DateTime         @default(now()) @db.Date()
  updatedAt      DateTime         @updatedAt

  group PermissionGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now()) @db.Date()
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
}

// HRMS Module
model Employee {
  id                  String                @id @default(uuid()) @db.Uuid()
  positionId          String?               @db.Uuid()
  fullname            String                @db.VarChar(50)
  photoUrl            String?
  birthDate           String?
  joinedAt            String?
  active              Boolean?              @default(true)
  phone               String?
  lastEducation       String?
  salary              Int?
  overtimeSalary      Int?
  safetyInductionDate DateTime?
  address             String?
  createdAt           DateTime              @default(now()) @db.Date()
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  attendances         Attendance[]
  cashAdvances        CashAdvance[]
  statusTracks        EmployeeStatusTrack[]
  competencies        EmployeeCompetency[]
  certifications      Certification[]
  overtimes           Overtime[]
  employeeAssigned    EmployeeAssigned[]
  projects            Project[]
  position            Position?             @relation(fields: [positionId], references: [id])
}

model Position {
  id          String     @id @default(uuid()) @db.Uuid()
  name        String     @db.VarChar(50)
  color       String?    @db.VarChar(7)
  description String?    @db.VarChar(255)
  employees   Employee[]
}

model Certification {
  id          Int       @id @default(autoincrement())
  employeeId  String    @db.Uuid()
  name        String
  fileUrl     String?
  publisher   String?
  issueMonth  String?   @db.VarChar(2)
  expiryMonth String?   @db.VarChar(2)
  issueYear   String?   @db.VarChar(4)
  expiryYear  String?   @db.VarChar(4)
  expireAt    DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id         String         @id @default(uuid()) @db.Uuid()
  employeeId String         @db.Uuid()
  createdBy  String         @db.Uuid()
  date       DateTime       @db.Date
  type       AttendanceType @default(presence)

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])
}

enum AttendanceType {
  presence
  absent
}

model Overtime {
  id         Int      @id @default(autoincrement())
  employeeId String   @db.Uuid()
  createdBy  String   @db.Uuid()
  totalHour  Int
  note       String?  @db.VarChar(255)
  date       DateTime @db.Date

  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [createdBy], references: [id])
}

model CashAdvance {
  id         Int      @id @default(autoincrement())
  employeeId String   @db.Uuid()
  createdBy  String   @db.Uuid()
  amount     Int      @db.Integer()
  date       DateTime @db.Date
  note       String?  @db.VarChar(255)

  employee Employee @relation(fields: [employeeId], references: [id])

  user User @relation(fields: [createdBy], references: [id])
}

model EmployeeCompetency {
  id           Int    @id @default(autoincrement())
  employeeId   String @db.Uuid()
  competencyId String @db.Uuid()

  employee   Employee   @relation(fields: [employeeId], references: [id])
  competency Competency @relation(fields: [competencyId], references: [id])
}

model Competency {
  id                 String               @id @default(uuid()) @db.Uuid()
  name               String               @db.VarChar(50)
  color              String?              @db.VarChar(7)
  EmployeeCompetency EmployeeCompetency[]
}

model EmployeeStatusTrack {
  id         String   @id @default(uuid()) @db.Uuid()
  date       DateTime @default(now())
  status     Boolean
  employeeId String   @db.Uuid()
  note       String?  @db.VarChar(255)

  employee Employee @relation(fields: [employeeId], references: [id])
}

// Activity Features

model BoardContainer {
  id       String       @id
  name     String       @unique
  color    String
  position Int
  items    BoardItems[]
}

model BoardItems {
  id          String         @id
  position    Int
  containerId String
  container   BoardContainer @relation(fields: [containerId], references: [id])
  project     Project?
}

model Project {
  id               Int                 @id @default(autoincrement())
  name             String
  progress         Int                 @default(0)
  payment_status   Int                 @default(0)
  description      String?
  date_created     DateTime            @default(now())
  date_started     DateTime?
  date_ended       DateTime?
  isArchive        Boolean?            @default(false)
  isDeleted        Boolean?            @default(false)
  net_value        Decimal?            @db.Decimal(10, 2)
  leadId           String?             @db.Uuid()
  clientId         Int?
  boardItemsId     String              @unique
  lead             User?               @relation(fields: [leadId], references: [id])
  client           Client?             @relation(fields: [clientId], references: [id])
  boardItems       BoardItems          @relation(fields: [boardItemsId], references: [id])
  employees        EmployeeAssigned[]
  labels           ProjectHasLabel[]
  activities       Activity[]
  TransactionGoods TransactionGoods[]
  attachments      ProjectAttachment[]
  ProjectEstimate  ProjectEstimate[]
  Employee         Employee?           @relation(fields: [employeeId], references: [id])
  employeeId       String?             @db.Uuid()
}

model ProjectAttachment {
  id          Int       @id @default(autoincrement())
  file        String
  name        String
  type        String?
  uploaded_by String?   @db.Uuid()
  projectId   Int
  isSecret    Boolean?  @default(false)
  uploaded_at DateTime? @default(now())
  user        User?     @relation(fields: [uploaded_by], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])
}

model ProjectEstimate {
  id        Int      @id @default(autoincrement())
  name      String
  price     Decimal? @db.Decimal(10, 2)
  qty       Int?
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Activity {
  id             Int                  @id @default(autoincrement())
  userId         String?              @db.Uuid()
  user           User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  name           String?
  comment        String
  projectId      Int
  replyId        Int?
  project        Project              @relation(fields: [projectId], references: [id], onDelete: NoAction)
  attachments    ActivityAttachment[]
  replies        Activity[]           @relation("ActivityReplies")
  parentActivity Activity?            @relation("ActivityReplies", fields: [replyId], references: [id], onDelete: NoAction)
  created_at     DateTime             @default(now())
  updated_at     DateTime?
  likes          ActivityLike[]
}

model ActivityLike {
  id         Int      @id @default(autoincrement())
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid()
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())

  @@unique([activityId, userId])
}

model ActivityAttachment {
  id         Int      @id @default(autoincrement())
  attachment String
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id])
}

model ProjectHasLabel {
  id        Int          @id @default(autoincrement())
  projectId Int
  labelId   Int
  project   Project      @relation(fields: [projectId], references: [id])
  label     ProjectLabel @relation(fields: [labelId], references: [id])
}

model EmployeeAssigned {
  id         Int      @id @default(autoincrement())
  projectId  Int
  employeeId String   @db.Uuid()
  project    Project  @relation(fields: [projectId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model ProjectLabel {
  id       Int               @id @default(autoincrement())
  name     String
  color    String
  projects ProjectHasLabel[]
}

model Client {
  id        Int            @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  position  String?
  companyId Int?
  company   CompanyClient? @relation(fields: [companyId], references: [id])
  Project   Project[]
}

model CompanyClient {
  id      Int      @id @default(autoincrement())
  name    String
  address String?
  phone   String?
  email   String?
  logo    String?
  users   Client[]
}

// MODULE INVENTORY
model Goods {
  id            Int      @id @default(autoincrement())
  name          String
  qty           Int
  available     Int
  minimum       Int      @default(1)
  description   String?
  photoUrl      String?
  locationId    Int?
  measurementId Int?
  categoryId    Int?
  brandId       Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_deleted    Boolean  @default(false)

  location        Location?          @relation(fields: [locationId], references: [id])
  measurement     Measurements?      @relation(fields: [measurementId], references: [id])
  brand           Brand?             @relation(fields: [brandId], references: [id])
  category        goodsCategory?     @relation(fields: [categoryId], references: [id])
  transactions    TransactionGoods[]
  stock_histories StockHistory[]

  @@index([locationId])
  @@index([categoryId])
  @@index([brandId])
  @@index([available])
}

model StockHistory {
  id               Int      @id @default(autoincrement())
  transactionId    Int      @unique
  goodsId          Int
  qty_before       Int
  available_before Int
  created_at       DateTime @default(now())

  transaction TransactionGoods @relation(fields: [transactionId], references: [id])
  good        Goods            @relation(fields: [goodsId], references: [id])

  @@index([goodsId, created_at])
}

model TransactionGoods {
  id          Int             @id @default(autoincrement())
  goodsId     Int
  qty         Int
  price       Decimal?
  supplierId  Int?
  date        DateTime
  type        TransactionType
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  projectId   Int?
  is_returned Boolean?        @default(false)

  project       Project?      @relation(fields: [projectId], references: [id])
  good          Goods         @relation(fields: [goodsId], references: [id])
  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  stock_history StockHistory?
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?       @db.Uuid()

  @@index([goodsId, date])
  @@index([supplierId])
}

enum TransactionType {
  in
  out
  opname
  borrowed
}

model Location {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Measurements {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Brand {
  id       Int     @id @default(autoincrement())
  name     String
  photoUrl String?
  goods    Goods[]
}

model goodsCategory {
  id    Int     @id @default(autoincrement())
  name  String
  goods Goods[]
}

model Supplier {
  id          Int                @id @default(autoincrement())
  name        String
  phone       String?
  email       String?
  address     String?
  photoUrl    String?
  tags        SupplierToTag[]
  transaction TransactionGoods[]
  employees   SupplierEmployee[]
}

model SupplierEmployee {
  id         Int      @id @default(autoincrement())
  name       String
  position   String?
  phone      String?
  supplierId Int
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

model SupplierTag {
  id       Int             @id @default(autoincrement())
  name     String
  color    String
  supplier SupplierToTag[]
}

model SupplierToTag {
  id         Int         @id @default(autoincrement())
  supplierId Int
  tagId      Int
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  tag        SupplierTag @relation(fields: [tagId], references: [id])
}

model Recap {
  id         Int      @id @default(autoincrement())
  name       String
  start_date DateTime @db.Date()
  end_date   DateTime @db.Date()
}

model Tour {
  id     Int    @id @default(autoincrement())
  key    String
  userId String @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])
}

model Helpdesk {
  id      Int          @id @default(autoincrement())
  message String
  userId  String       @db.Uuid()
  resolve Boolean      @default(false)
  type    HelpdeskType
  user    User         @relation(fields: [userId], references: [id])
}

enum HelpdeskType {
  feature
  bug
}
