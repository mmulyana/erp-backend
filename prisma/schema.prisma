generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Authorization
model User {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  email      String        @unique
  password   String
  created_at DateTime      @default(now()) @db.Date()
  updated_at DateTime      @default(now()) @db.Date()
  activities ActivityLog[]
  roles      UserRole[]

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("userRoles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@map("rolePermissions")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  groupId     Int
  group       PermissionGroup  @relation(fields: [groupId], references: [id])
  roles       RolePermission[]

  @@map("permissions")
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  permissions Permission[]

  @@map("permissionGroups")
}

// HRIS Module
model Employee {
  id           Int                   @id @default(autoincrement())
  firstName    String                @db.VarChar(50)
  lastName     String?               @db.VarChar(50)
  nickname     String?               @db.VarChar(50)
  hireDate     DateTime?             @db.Date
  salary       Decimal?              @db.Decimal(10, 2)
  status       EmployeeStatus        @default(active)
  position     Position?             @relation(fields: [positionId], references: [id])
  positionId   Int?
  attendances  Attendance[]
  competencies Competency[]
  cashAdvances CashAdvance[]
  leaves       Leave[]
  contact      Contact[]
  address      Address[]
  statusTracks EmployeeStatusTrack[]
}

model Contact {
  id         Int         @id @default(autoincrement())
  type       ContactType @default(phoneNumber)
  value      String
  employeeId Int
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

model Address {
  id        Int         @id @default(autoincrement())
  type      AddressType @default(domicile)
  rt        String?
  rw        String?
  kampung   String?
  desa      String?
  kecamatan String?
  kebupaten String?
  provinsi  String?
  kodePos   Int?
  employeId Int
  employee  Employee    @relation(fields: [employeId], references: [id])
}

model Position {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?
  employees   Employee[]
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId Int       @map("employee_id")
  date       DateTime  @db.Date
  timeIn     DateTime? @map("time_in") @db.Time
  timeOut    DateTime? @map("time_out") @db.Time
  isOnLeave  Boolean   @map("is_on_leave")
  leave      Leave?    @relation(fields: [leaveId], references: [id])
  leaveId    Int?      @map("leave_id")
}

model Competency {
  id              Int           @id @default(autoincrement())
  employee        Employee      @relation(fields: [employeeId], references: [id])
  employeeId      Int           @map("employee_id")
  name            String        @db.VarChar(100)
  certification   Certification @relation(fields: [certificationId], references: [id])
  certificationId Int           @map("certification_id")
}

model Certification {
  id                  Int          @id @default(autoincrement())
  name                String       @db.VarChar(100)
  issuingOrganization String       @map("issuing_organization") @db.VarChar(100)
  issueDate           DateTime     @map("issue_date") @db.Date
  expiryDate          DateTime     @map("expiry_date") @db.Date
  competencies        Competency[]
}

model CashAdvance {
  id           Int      @id @default(autoincrement())
  employee     Employee @relation(fields: [employeeId], references: [id])
  employeeId   Int      @map("employee_id")
  amount       Decimal  @db.Decimal(10, 2)
  requestDate  DateTime @map("request_date") @db.Date
  approvalDate DateTime @map("approval_date") @db.Date
  status       Status
}

model Leave {
  id          Int          @id @default(autoincrement())
  employee    Employee     @relation(fields: [employeeId], references: [id])
  employeeId  Int          @map("employee_id")
  startDate   DateTime     @map("start_date") @db.Date
  endDate     DateTime     @map("end_date") @db.Date
  leaveType   LeaveType    @map("leave_type")
  status      Status
  attendances Attendance[]
}

// Activity Features
model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String
  module      String
  description String
  timestamp   DateTime @default(now())
}

model EmployeeStatusTrack {
  id         Int            @id @default(autoincrement())
  date       DateTime       @default(now()) @db.DateTime()
  status     EmployeeStatus
  employeeId Int
  employee   Employee       @relation(fields: [employeeId], references: [id])
}

enum EmployeeStatus {
  active
  nonactive
}

enum Status {
  pending
  approved
  rejected
}

enum LeaveType {
  vacation
  sick
  personal
  maternity
  paternity
}

enum ContactType {
  email
  phoneNumber
  socialMedia
}

enum AddressType {
  domicile
  origin
}
